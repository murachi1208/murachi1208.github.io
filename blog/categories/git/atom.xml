<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | OSSっていまさら古いか？ｗ]]></title>
  <link href="http://murachi1208.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://murachi1208.github.io/"/>
  <updated>2014-06-29T01:59:00+09:00</updated>
  <id>http://murachi1208.github.io/</id>
  <author>
    <name><![CDATA[murachi1208]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant + CentOS6.5 + GitLab Omnibus]]></title>
    <link href="http://murachi1208.github.io/blog/git/gitlab/"/>
    <updated>2014-06-09T22:51:27+09:00</updated>
    <id>http://murachi1208.github.io/blog/git/gitlab</id>
    <content type="html"><![CDATA[<h2>Gitlabって</h2>

<p>GitHubを使用したいがセキュリティの関係とか大人の諸事情（￥）で使えなかったりする場合、GitHubクローンっていうのがあります。その中でも一押しなのが「GitLab」。Omnibus版 を使えばセットアップも簡単だしVagrantだったら…まあそのまま初期運用でも問題なしなのでいつものごとく10分クッキング。</p>

<!-- more -->


<h2>前提条件</h2>

<p>Vagrant もしくは、CentOS6.5 の環境を構築済みであること。あと2014/06/10現在のインストール方法です（Omnibus版は頻繁にアップデートされる）。</p>

<h3>RPM のダウンロードと設定</h3>

<p>Omnibus版でも最新版を使いたいって設定ね。まずchefで必要な情報を設定まで行う。</p>

<p><code>
$ curl -o gitlab-6.9.2_omnibus-1.el6.x86_64.rpm https://downloads-packages.s3.amazonaws.com/centos-6.5/gitlab-6.9.2_omnibus.1-1.el6.x86_64.rpm
$ sudo yum install openssh-serve
$ sudo yum install postfix
$ sudo rpm -i gitlab-6.9.2_omnibus-1.el6.x86_64.rpm
$ sudo su gitlab-ctl reconfigure
</code></p>

<h3>Nginx の設定</h3>

<p>ディレクトリが既に存在するときもあるけど。、ああ。手順としてね。</p>

<p><code>
% sudo mkdir /etc/gitlab
% sudo vi /etc/gitlab/gitlab.rb
</code></p>

<h3>/etc/gitlab/gitlab.rb</h3>

<p>えんじんえっくす、をつかうのだよ。<code>sudo vi /etc/gitlab/gitlab.rb</code> を実行して下記の内容をはりつける。</p>

<p><code>
external_url "http://localhost"
unicorn["worker_processes"] = 1
postgresql["shared_buffers"] = "128MB"
postgresql["effective_cache_size"] = "32MB"
</code></p>

<h3>再設定と起動</h3>

<p><code>
% sudo gitlab-ctl reconfigure
% sudo gitlab-ctl start
</code></p>

<h3>アクセス</h3>

<p>Nginx は、80で立ち上がるので Vagrant で port fowrd しておく。</p>

<p>```
config.vm.define :web do |web|</p>

<pre><code>web.vm.network :forwarded_port, guest: 80, host: 9999, host_ip: "127.0.0.1"
</code></pre>

<p>end
```</p>

<p>上記の設定だと <code>http://localhost:9999</code> とすれば、アクセス可能。</p>

<h3>初期ユーザでログイン</h3>

<p>GitLab の初期アクセス。</p>

<p><code>
User: admin@local.host
Password: 5iveL!fe
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git の改行でちょっとだけハマったのでメモ]]></title>
    <link href="http://murachi1208.github.io/blog/git/git_config/"/>
    <updated>2014-06-08T13:52:20+09:00</updated>
    <id>http://murachi1208.github.io/blog/git/git_config</id>
    <content type="html"><![CDATA[<h2>git config</h2>

<p>git clone したあと Windowsでファイルを編集後に push したら全行が更新対象になったでござる。まあWindowsとUnixでの改行コードが違うあれで少し困ったってなったのでその解決策です。</p>

<!-- more -->


<p>基本的にUnixがメインとなるので特にこだわりが無ければ改行コードは「LF」にしておきます。</p>

<p><code>
git config --global core.autocrlf false
</code></p>

<p>で、ok。</p>

<h2>.gitconfig に保存されている</h2>

<p>autocrlf の設定は「.gitconfig」に設定されています。</p>

<p>Windows(msysgit)の場合は、<code>C:\Users\&lt;ユーザ名\.gitconfig</code> に保存され、Unixの場合は、<code>~/.gitconfig</code> に下記の書式で保存されます。</p>

<p>```
[core]</p>

<pre><code>quotepath = false
</code></pre>

<p>```</p>

<p>あといつものお約束コマンドも実行すると。</p>

<p>```
$ git config &mdash;global user.name &lsquo;your name&rsquo;
$ git config &mdash;global user.email <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#121;&#111;&#117;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#121;&#x6f;&#x75;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a></p>

<p>```</p>

<p>下記のように保存されます。</p>

<p>```
[user]</p>

<pre><code>name = your name
email = you@example.com
</code></pre>

<p>[core]</p>

<pre><code>quotepath = false
autoCRLF = false
</code></pre>

<p>```</p>

<h3>chefとか使って</h3>

<p>毎回コマンドを打つ（１回でいいんだけどね）のが面倒なのと、仮想環境を作ったり消したりしているとコマンドをついつい忘れてしまうので仮想環境を作ったときに .gitconfig を作成するように <a href="http://tsuchikazu.net/chef_solo_start/">chef-solo</a> など使って作成しておくのがベストです。</p>
]]></content>
  </entry>
  
</feed>
